name: Deploy VinylPlatz to Azure

on:
  push:
    branches:
      - main # Trigger deployment on push to the main branch

env:
  NODE_VERSION: '20.x' # Define Node.js version to use

jobs:
  build_and_deploy_backend:
    name: Build & Deploy Backend (data-api)
    runs-on: ubuntu-latest
    environment: production # Optional: Link to GitHub Environment for secrets/protection rules

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: /Users/miquelstam/vinylplatz/package-lock.json

    - name: Install dependencies
      run: npm ci
      working-directory: /Users/miquelstam/vinylplatz # Ensure correct working directory

    - name: Build NestJS backend
      run: npx nx build data-api --configuration=production
      working-directory: /Users/miquelstam/vinylplatz # Ensure correct working directory

    - name: Log in to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }} # Service principal credentials

    - name: Deploy to Azure App Service
      uses: azure/webapps-deploy@v3 # Use v3 for latest features
      with:
        app-name: ${{ secrets.AZURE_APP_SERVICE_NAME }} # GitHub Secret: Name of your Azure App Service
        package: /Users/miquelstam/vinylplatz/dist/apps/data-api # Absolute path to the built backend artifact
        # Optional: Set environment variables needed by the backend at runtime
        app-settings-json: >-
          [
            { "name": "DATABASE_URL", "value": "${{ secrets.DATABASE_URL }}", "slotSetting": false },
            { "name": "JWT_SECRET", "value": "${{ secrets.JWT_SECRET }}", "slotSetting": false },
            { "name": "NODE_ENV", "value": "production", "slotSetting": false },
            { "name": "PORT", "value": "8080", "slotSetting": false }
          ]
        # Optional: Define startup command if needed (e.g., if package.json start script isn't sufficient)
        # startup-command: 'node main.js' # Example

  build_and_deploy_frontend:
    name: Build & Deploy Frontend (vinylplatz-web)
    runs-on: ubuntu-latest
    needs: build_and_deploy_backend # Optional: Deploy frontend only after backend is done
    environment: production # Optional: Link to GitHub Environment

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: /Users/miquelstam/vinylplatz/package-lock.json

    - name: Install dependencies
      run: npm ci
      working-directory: /Users/miquelstam/vinylplatz # Ensure correct working directory

    - name: Build Vue frontend
      run: npx nx build vinylplatz-web --configuration=production
      working-directory: /Users/miquelstam/vinylplatz # Ensure correct working directory
      env:
        # Ensure VITE_API_URL points to your production backend URL if needed during build
        # VITE_API_URL: https://<your-backend-app-name>.azurewebsites.net/api
        NODE_ENV: production

    - name: Deploy to Azure Static Web Apps
      uses: Azure/static-web-apps-deploy@v1
      with:
        azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN }} # GitHub Secret: Deployment token
        repo_token: ${{ secrets.GITHUB_TOKEN }} # Used for GitHub integrations
        action: "upload"
        app_location: "/dist/apps/vinylplatz-web" # Relative path from repo root to the built frontend artifact
        # api_location: "" # No API backend in this SWA deployment, it's separate
        output_location: "" # Build output is directly in app_location
        # Optional: Skip API build if needed (shouldn't be necessary here)
        # skip_api_build: true
        # Optional: Skip App build if you build in a previous step (which we do)
        # skip_app_build: true
